// Reads touch panel input based on a timer and draws a dot on the LCD screen
// and send a message to Task 2. Waits for a message from Task 2 and displays
// the result. Waits for a key press from the PuTTY console and reads a file
// from the SD card.

// create a button layout used for task 1
#define num_buttons 12
struct button {
  int position[num_buttons][4] = {(x_min, x_man, y_min, y_max),   // Button 1
                                  (x_min, x_man, y_min, y_max)};  // Button 2
  int item[num_buttons];
  int
}

/*
        Buttons
        - Play
        - Stop
        - Save
        - Load
        - New
        - Reset (Reset zoom)
        - Zoom In
        - Zoom out
        - Move Left
        - Move Right
        - Up arrow
        - Down arrow

*/

// Zoom takes current time duration and increments throught to finer and finer
//     resolustion.

struct window {
  int width = 250;
  int height = 142;
  int position[4] = {x_min, x_max, y_min, y_max};

  int bg_colour;
  int line_colour;
  int grid_colour;

  int zoom_coeff;         // Number between 1 and MAX_ZOOM
  int window_buffer_len;  // Number of input values that are mapped to the
                          // window buffer

}

#define Max_Samples 10, 000
// Raw ADC input values
// Will need index for current position
double Input_buffer[Max_Samples] = {0};

// Filtered input ready for display
// Will need index for current position
int Window_buffer[window.width][2] = {AVG(Input_buffer), start_index};

// Number of Input_buffer elements that fit with a Window_buffer element
window_buffer_len =
    Max_Samples / zoom_coeff / window.width;  // Values must be whole number

// SD card string
// On startup mount SD card
//

//

//